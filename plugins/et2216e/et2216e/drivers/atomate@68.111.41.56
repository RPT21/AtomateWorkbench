import struct
import time
import logging

logger = logging.getLogger('modbus')

DEBUG = True

def crc16( inmsg ):
    """
    Calculates crc value of message and correctness of message
    Returns ( result, (crcl, crch))

    Returns CRC Low and CRC High of message.

    If the incoming message contains the CRC values on the last two bytes then
    it returns 0 if the crc is correct for the message.

    """
    CRC = 0xffff
    next = 0
    carry = 0
    n = 0
    crch = 0
    crcl = 0

    msg = list(inmsg)

    for next in map(lambda c: ord(c), msg):
        CRC ^= next

        for n in range(8):
            carry = CRC & 1
            CRC >>= 1
            if carry:
                CRC ^= 0xA001

    crch = CRC/256
    crcl = CRC%256

    return (CRC, (crcl, crch))
            
def fmtHex(msg):
    buff = ""
    sep = ""
    for c in msg:
        buff += "%s0x%x"%(sep, ord(c))
        sep = " "
        
    return buff

# format a modbus message for serial comm only
def formatRTUMessage( deviceaddr, function, msg ):
    msg = struct.pack("BB", deviceaddr, function) + msg

    # perform crc check and add it
    (result, (crcl, crch)) = crc16(msg)
    
    result = msg + struct.pack("BB", crcl, crch)
    
    if DEBUG:
        logger.debug( "FormatRTUMessage '%s'" % fmtHex(result))

    return result    
    

class ModbusRTUChannel(object):
    def __init__(self): 
        self.delay = 0.003     # in milliseconds, the number to wait
        self.messageEnd = 0    # the time at which the message ended delivery

    def configure(self, port, deviceAddr):
       self.port = port
       self.deviceAddress = deviceAddr

    def formatReadWords(self, startAddress, numWords):
        return struct.pack(">HH", int(startAddress), int(numWords))

    def parseReadWordsMsg(self, result):
        self.checkError(result)
        numwords = ord(result[0])/2
        #print "num words: %d beotch - %d"%(numwords, len(result))
        words = struct.unpack(">%dH"%numwords, result[1:])
        
        if DEBUG:
            logger.debug( "Read %d"% len(result))
            logger.debug( "\tNum Words: %d"% numwords)
            logger.debug("\tWords:%d"%words)
        
        return words
        
        
    def readWords(self, startAddress, numWords):
        msg = struct.pack(">HH", int(startAddress), int(numWords))
        
        result = self.sendMessage(3, msg)
        
        self.checkError(result)
        
        numwords = ord(result[0])/2
        
        # unpack
        words = struct.unpack(">%dH"%numwords, result[1:])
        
        if DEBUG:
            logger.debug( "Read %d"% len(result))
            logger.debug("\tNum Words: %d" % numwords)
            logger.debug("\tWords:%d"% words)
        
        return words

    def writeWords(self, wordAddress, values):
        msg = struct.pack(">HHb", wordAddress, len(values), 2*len(values))
        woot = [">%dH"%len(map(lambda x: int(x), values))]
        woot.extend(values)
        
        msg += apply(struct.pack, woot)
                
        result = self.sendMessage(16, msg)
        self.checkError(result)
        
        (addr, numwritten)=struct.unpack(">HH", result)
        
        if DEBUG:
            logger.debug( "Wrote")
            logger.debug("\tNum: %d"%numwritten)
            logger.debug("\tAddr %x"%addr)

    def formatWriteWord(self, address, value):
        msg = struct.pack(">HH", int(address), int(value))
        msg = self.formatRawMessage(6, msg)
        return msg
        
    def parseWriteWord(self, msg):
        self.checkError(msg)
        (addr, val)=struct.unpack(">HH", result)
        
        return val
        
    def writeWord(self, address, value):
        msg = struct.pack(">HH", int(address), int(value))
        
        result = self.sendMessage(6, msg)
        self.checkError(result)
        (addr, val) = struct.unpack(">HH", result)
        
        return val
        
    def fastRead(self):
        result = self.sendMessage(7, "")
                
        return ()
    
    def formatWriteBit(self, address, on):
        von = 0x00
        if on:
            von = 0x0100
            
        msg = struct.pack(">HH", int(address), int(von))
        
        return self.formatRawMessage(5, msg)
    
    def parseWriteBit(self, result):    
        self.checkError(result)
        (addr, val) = struct.unpack(">HH", result)
        
        return val&(1<<8)
        
    def writeBit(self, address, on):
        von = 0x00
        if on:
            von = 0x0100
            
        msg = struct.pack(">HH", int(address), int(von))
        
        result = self.sendMessage(5, msg)
        self.checkError(result)
        
        (addr, val) = struct.unpack(">HH", result)
        
        return val&(1<<8)
    
    def checkError(self, buff):
        if len(buff) > 1:
            return
        
        if ord(buff[0]) == 02:
            msg = "Illegal Data Address"        
        else:
            msg = "Illegal Data Value"
                
        raise Exception( msg )
            
        
        
    def readBits(self, startAddress, numBits):
        msg = struct.pack(">HH", int(startAddress), int(numBits))
        
        result = self.sendMessage(1, msg)
        
        # parse it ...
        # byte   | bytes ...
        # -------+-----------
        # num    | bytes ...
        
        numbytes = ord(result[0])
        bytes = result[1:]
        
        lst = map(lambda x: 0, range(numBits))
        
        # try to read numbits instead ...
        for i in range(numbytes):
            byte = ord(bytes[i])
            
            for j in range(8):
                index = (i*8)+j
                if index == numBits:
                    return lst
                
                lst[index] = byte & (1<<j)
                
        return lst
        
    def formatRawMessage(self, function, msg):
        return formatRTUMessage(self.deviceAddress, function, msg)
        #self.port.write(msg)
        #self.port.flush()
    
    def sendMessage(self, function, msg):
        msg = formatRTUMessage(self.deviceAddress, function, msg)
        self.delayForSend()
        
        self.port.write(msg)
        self.port.flush()
        
        # get into wait ...
        start = time.time()
        buff = ""
        startIn = 0
        isStarted = False   # set to true when we're starting to read stuff
                            # so that it can wait for proper eot
        while (time.time()-start) < 1:
            if self.port.inWaiting() > 0:
                startIn = time.time()
                buff += self.port.read(self.port.inWaiting())
                isStarted = True
                
            if isStarted and ((time.time()-startIn) > self.delay):
                self.messageEnd = time.time()
                return self.parseMessage(buff)
        
        self.messageEnd = time.time()
        raise Exception("Timeout while waiting for reply from port.  Bytes read so far: %d"%len(buff))
                
    def parseMessage(self, msg):
        # check crc
        omsg = msg
        (result, ignored) = crc16(msg)
        if result != 0:
            raise Exception("Bad CRC")
        
        # unpack
        addr = ord(msg[0])
        func = ord(msg[1])
        rest = msg[2: len(msg)-2]
        l = len(msg)-2
        
        crcl, crch = ord(msg[l]), ord(msg[l+1])
        
        if DEBUG:
            logger.debug( "parsed message:")
            logger.debug( "\tAddress: %x"% addr)
            logger.debug( "\tFunction Code %x"%func)
            logger.debug( "\tMsg: %s", fmtHex(rest))
            logger.debug("\tCRC: %d, %x,%x"%(result, crcl, crch))
        
        if not self.deviceAddress == addr:
            raise Exception("Incorrect address %x, this channel uses %x"%(addr, self.deviceAddress))
            
        return rest
        
    def delayForSend(self):
        """Waits a little bit to let the min time b/w messages pass"""
        delta = time.time()-self.messageEnd
        
        if delta > self.delay:
            return
        
        minimum = self.delay - delta # the proper time to wait
        
        time.sleep(minimum)
        
        
        
        
if __name__ == '__main__':
    import serial

    DEBUG=True
    
    port = serial.Serial(0)
    
    print "Opening port 1"
    
    channel = ModbusRTUChannel()
    channel.configure(port, 1)
    
    #print "Reading hardware version: %0.4x"%channel.readWords(122, 1)
    print "Reading software version: %0.4x"%channel.readWords(107, 1)

    """
    print "Entering manual mode"
    channel.writeBit(2, True)
    print "Delaying for 2 seconds"
    time.sleep(2)
    print "Setting setpoint 1 to 100"
    channel.writeWord(25, 100)
    print "Waiting for 2 seconds"
    time.sleep(2)
    """
    #print "Setting setpoint 1 to 123"
    #channel.writeWord(25, 123)
    
    #print "going to talk to 2110"
    #time.sleep(2)
    #port.write("\n\r")
    #print "awaitin"
    
    time.sleep(2)
    port.flush()
    port.write('\n\r*IDN?\n\r')
    #port.flush()
    print "waiting ..."
    time.sleep(2)
    print "what is what", port.inWaiting()
    if port.inWaiting() > 0:
        print ":", port.read(port.inWaiting())

    port.write('')
    time.sleep(0.100)
    print "waiting?", port.inWaiting()
    if port.inWaiting() > 0:
        print ">", port.read(port.inWaiting())
        
    port.close()
    

    
    


